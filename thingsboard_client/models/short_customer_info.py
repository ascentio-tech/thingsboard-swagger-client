# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from thingsboard_client.models.customer_id import CustomerId  # noqa: F401,E501


class ShortCustomerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'CustomerId',
        'public': 'bool',
        'title': 'str',
        'is_public': 'bool'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'public': 'public',
        'title': 'title',
        'is_public': 'isPublic'
    }

    def __init__(self, customer_id=None, public=None, title=None, is_public=None):  # noqa: E501
        """ShortCustomerInfo - a model defined in Swagger"""  # noqa: E501
        self._customer_id = None
        self._public = None
        self._title = None
        self._is_public = None
        self.discriminator = None
        if customer_id is not None:
            self.customer_id = customer_id
        if public is not None:
            self.public = public
        if title is not None:
            self.title = title
        self.is_public = is_public

    @property
    def customer_id(self):
        """Gets the customer_id of this ShortCustomerInfo.  # noqa: E501


        :return: The customer_id of this ShortCustomerInfo.  # noqa: E501
        :rtype: CustomerId
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ShortCustomerInfo.


        :param customer_id: The customer_id of this ShortCustomerInfo.  # noqa: E501
        :type: CustomerId
        """

        self._customer_id = customer_id

    @property
    def public(self):
        """Gets the public of this ShortCustomerInfo.  # noqa: E501


        :return: The public of this ShortCustomerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ShortCustomerInfo.


        :param public: The public of this ShortCustomerInfo.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def title(self):
        """Gets the title of this ShortCustomerInfo.  # noqa: E501


        :return: The title of this ShortCustomerInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ShortCustomerInfo.


        :param title: The title of this ShortCustomerInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def is_public(self):
        """Gets the is_public of this ShortCustomerInfo.  # noqa: E501


        :return: The is_public of this ShortCustomerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ShortCustomerInfo.


        :param is_public: The is_public of this ShortCustomerInfo.  # noqa: E501
        :type: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")  # noqa: E501

        self._is_public = is_public

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShortCustomerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShortCustomerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
