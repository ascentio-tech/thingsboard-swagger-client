# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'str',
        'created_time': 'int',
        'entity_id': 'EntityId',
        'id': 'EventId',
        'tenant_id': 'TenantId',
        'type': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'body': 'body',
        'created_time': 'createdTime',
        'entity_id': 'entityId',
        'id': 'id',
        'tenant_id': 'tenantId',
        'type': 'type',
        'uid': 'uid'
    }

    def __init__(self, body=None, created_time=None, entity_id=None, id=None, tenant_id=None, type=None, uid=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._body = None
        self._created_time = None
        self._entity_id = None
        self._id = None
        self._tenant_id = None
        self._type = None
        self._uid = None
        self.discriminator = None
        if body is not None:
            self.body = body
        if created_time is not None:
            self.created_time = created_time
        if entity_id is not None:
            self.entity_id = entity_id
        if id is not None:
            self.id = id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if type is not None:
            self.type = type
        if uid is not None:
            self.uid = uid

    @property
    def body(self):
        """Gets the body of this Event.  # noqa: E501


        :return: The body of this Event.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Event.


        :param body: The body of this Event.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def created_time(self):
        """Gets the created_time of this Event.  # noqa: E501


        :return: The created_time of this Event.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Event.


        :param created_time: The created_time of this Event.  # noqa: E501
        :type: int
        """

        self._created_time = created_time

    @property
    def entity_id(self):
        """Gets the entity_id of this Event.  # noqa: E501


        :return: The entity_id of this Event.  # noqa: E501
        :rtype: EntityId
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Event.


        :param entity_id: The entity_id of this Event.  # noqa: E501
        :type: EntityId
        """

        self._entity_id = entity_id

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: EventId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: EventId
        """

        self._id = id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Event.  # noqa: E501


        :return: The tenant_id of this Event.  # noqa: E501
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Event.


        :param tenant_id: The tenant_id of this Event.  # noqa: E501
        :type: TenantId
        """

        self._tenant_id = tenant_id

    @property
    def type(self):
        """Gets the type of this Event.  # noqa: E501


        :return: The type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this Event.  # noqa: E501


        :return: The uid of this Event.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Event.


        :param uid: The uid of this Event.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
